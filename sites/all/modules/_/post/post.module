<?php
/**
 * создание сущности выполнено на примере
 * http://www.drupaler.by/lessons/kak-sozdat-sushchnost-v-drupal
 */

include 'includes/post.entity.inc';
//include 'includes/post.pages.inc';
//include 'includes/post.admin.inc';

/**
 * Implements hook_menu().
 */
function post_menu() {
  // Top level "post" container.
  $items['admin/config/post'] = array(
    'title' => 'Post',
    'description' => 'Administration tools.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/post/posts'] = array(
    'title' => 'Posts',
    'description' => 'Configure general post settings, fields, and displays.',
    'page callback' => 'post_admin_posts',
    'access arguments' => array('administer posts'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/post.admin.inc',
  );
  $items['admin/config/post/posts/list'] = array(
    'title' => 'Posts',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['posts'] = array(
    'title' => 'Posts',
    'page callback' => 'posts_page',
    'access callback' => 'post_access',
    'access arguments' => array('create', 'post'),
    'file' => 'includes/post.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // Страница создания Записи.
//  $items['post/add'] = array(
//    'title' => 'Add post',
//    'page callback' => 'post_page_add',
//    'access callback' => 'post_access',
//    'access arguments' => array('create', 'post'),
//    'file' => 'includes/post.pages.inc',
//  );
//  // Страница просмотра Записи.
//  $items['post/%post'] = array(
//    'title callback' => 'post_page_title',
//    'title arguments' => array(1),
//    'page callback' => 'post_page_view',
//    'page arguments' => array(1),
//    'access callback' => 'post_access',
//    'access arguments' => array('view', 'post', 1),
//    'file' => 'includes/post.pages.inc',
//  );
//  $items['post/%post/view'] = array(
//    'title' => 'View',
//    'type' => MENU_DEFAULT_LOCAL_TASK,
//    'weight' => 0,
//  );
  // Страница редактирования Записи.
  $items['post/%post/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'post_page_edit',
    'page arguments' => array(1),
    'access callback' => 'post_access',
    'access arguments' => array('update', 'post', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/post.pages.inc',
  );
  // Страница удаления Записи.
  $items['post/%post/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('post_delete_confirm', 1),
    'access callback' => 'post_access',
    'access arguments' => array('delete', 'post', 1),
    'file' => 'includes/post.pages.inc',
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function post_permission() {
  return array(
    'configure posts settings' => array(
      'title' => t('Configure posts settings'),
      'description' => t('Allows users to configure posts settings.'),
      'restrict access' => TRUE,
    ),
    'administer posts' => array(
      'title' => t('Administer posts'),
      'restrict access' => TRUE,
    ),
    'edit any posts' => array(
      'title' => t('Edit any posts'),
      'restrict access' => TRUE,
    ),
    'edit own posts' => array(
      'title' => t('Edit own posts'),
      'restrict access' => TRUE,
    ),
    'delete any posts' => array(
      'title' => t('Delete any posts'),
      'restrict access' => TRUE,
    ),
    'delete own posts' => array(
      'title' => t('Delete own posts'),
      'restrict access' => TRUE,
    ),
    'create posts' => array(
      'title' => t('Create new posts'),
    ),
    'view posts' => array(
      'title' => t('View posts'),
    ),
  );
}




/**
 * --------------------------------------- Форма ------------------------------------------------
 */
function post_form($form, &$form_state)
{
  global $user;
  $photo_style = 'thumbnail';
  $photo_uri = 'public://default_images/no_photo.png';

  $user_wrapper = entity_metadata_wrapper('user', $user);
  if (!empty($user_wrapper->value()->picture)) {
    $photo_uri = $user_wrapper->value()->picture->uri;
  }

  $photo = image_style_url($photo_style, $photo_uri);

  $form = [
    '#attributes' => ['class' => ['post-form']],
  ];

  $form['field'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['post-field-wrap']],
  ];
  $form['field']['photo'] = [
    '#markup' => '<img src="' . $photo . '" class="img-circle"/>',
  ];
  $form['field']['message'] = [
    '#type' => 'textarea',
    '#rows' => 2,
    '#attributes' => [
      'class' => ['autoExpand'],
      'placeholder' => t('What\'s new?'),
      'data-min-rows' => 2,
    ],
    '#prefix' => '<div class="post-field">',
    '#suffix' => '</div>',
  ];

  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Post'),
    '#attributes' => ['class' => ['pull-right']],

  );

  return $form;
}

function post_form_validate(&$form, &$form_state)
{
  if (drupal_strlen($form_state['values']['message']) < 2) form_set_error('top][message', 'Текст сообщения должен быть не короче 2 символов!');
}

function post_form_submit(&$form, &$form_state)
{
  // определить контекст
  $recid = 0;
  $rectype = '';

  // создать Запись
  $post = entity_create('post', array(
    'senid' => $GLOBALS['user']->uid,
    'sentype' => 'user',
    'recid' => $recid,
    'rectype' => $rectype,
    'created' => time(),
    'message' => $form_state['values']['message'],
  ));
  entity_save('post', $post);
}

/**
 * --------------------------------------- Блоки ------------------------------------------------
 * Implements hook_block_info().
 */
function post_block_info()
{
  $blocks = array(
    'post_form' => [
      'info' => t('Post form'),
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => '<?php return post_access("create", "post"); ?>'
    ],
    'news_menu' => [
      'info' => t('News menu'),
      'cache' => DRUPAL_CACHE_PER_ROLE,
      'region' => 'sidebar_second',
    ],
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function post_block_view($delta = '')
{
  global $user;

  $block = array();

  switch ($delta) {
    case 'post_form':
      $block['subject'] = t('Post form');
      $block['content'] = drupal_get_form('post_form');

      return $block;
    case 'news_menu':
      $block['subject'] = t('News menu');
      $block['content'] = _news_menu_block_content();

      return $block;
  }
}



function _news_menu_block_content()
{
  $tree = menu_tree_page_data('menu-news');

  // Localize the tree.
  if (module_exists('i18n_menu')) {
    $tree = i18n_menu_localize_tree($tree);
  }

  // Build links.
  $profile_nav = menu_tree_output($tree);

  return render($profile_nav);
}

